/**
items, path and entities in steer.js domain
@namespace steer.item
*/
steer.item = {};

//========================================================================================================================
//========================================================================================================================
// ItemBase          src/ItemContainer
//========================================================================================================================
//========================================================================================================================
/**
the base class of item which can be added to steer.js domain for simulation.
@constructor 
@param {string} [name=null] - The identity name of this item. if it is not given, the name will be automatically generated by using its class name and an auto id.
*/
steer.item.ItemBase = function () {
    /** @property {string} type - class name of this item dynamically generated when created */
    this.type;

    /** @property {string} name - the giving identity name of this item*/
    this.name;
}

/**
remove item
*/
steer.item.ItemBase.prototype.remove = function () { };



//========================================================================================================================
//========================================================================================================================
// ItemEntity          src/ItemContainer
//========================================================================================================================
//========================================================================================================================
/**
item that have physical entities in the domain
@extends steer.item.ItemBase
@constructor 
@param {box2d.b2Body} b2body - the given box2d object
@param {string} name- identity name of this object
*/
steer.item.ItemEntity = function () {

    /** @property {box2d.b2Body} b2body - the box2d physic b2body*/
    this.b2body;

    /** @property {boolean} dynamic - dynamic items receive moving updates and is able to move by given force. */
    this.dynamic;
}

/** get the position x in box2d coordinate 
@returns {number} return position x in box2d coordinate 
*/
steer.item.ItemEntity.prototype.getb2X = function () { };
/** get the position y in box2d coordinate 
@returns {number} return position y in box2d coordinate 
*/
steer.item.ItemEntity.prototype.getb2Y = function () { };
/** get the position x in pixel coordinate
@returns {number} return position x in pixel coordinate 
*/
steer.item.ItemEntity.prototype.getPixelX = function () { };
/** get the position y in pixel coordinate
@returns {number} return position y in pixel coordinate 
*/
steer.item.ItemEntity.prototype.getPixelY = function () { };
/** get the position vector in box2d coordinate 
@returns {steer.Vector} return position in box2d coordinate 
*/
steer.item.ItemEntity.prototype.getb2Position = function () { };
/** get the position vector in pixel coordinate 
@returns {steer.Vector} return position in pixel coordinate 
*/
steer.item.ItemEntity.prototype.getSteerPosition = function () { };

/** set the position base on box2d coordinate
@param {number} x - position x in box2d coordinate
@param {number} y - position y in box2d coordinate
*/
steer.item.ItemEntity.prototype.setb2Position = function () { };

/** set the position base on pixel coordinate
@param {number} x - position x in pixel coordinate
@param {number} y - position y in pixel coordinate
*/
steer.item.ItemEntity.prototype.setSteerPosition = function () { };

/** set the object to dynamic or static, dynamic items receive moving updates and is able to move by given force.
@param {boolean} isDynamic - true to set object dynamic, false to set static
*/
steer.item.ItemEntity.prototype.setDynamic = function () { };

/** set collision mask to this item
@param {number} maskBits - collision mask, using collision filtering in box2d.
*/
steer.item.ItemEntity.prototype.setCollisionMask = function () { };

/** set the angle of this item
@param {number} radian - angle in radian value
@param {boolean} [indegree=false] - if the given value is in degree, set this to true.
*/
steer.item.ItemEntity.prototype.setBodyAngle = function () { };

/** 
get boundingbox of this item that includes physical entitie 
and any other area that are used in steer.js caculations such as raycast and seperation radius
@returns {object} rectangle - an rectangle object in the format  { x: number; y: number; w: number; h: number }
*/
steer.item.ItemEntity.prototype.getBoundingBox = function () { };



//========================================================================================================================
//========================================================================================================================
// CreateInfo          src/ItemContainer
//========================================================================================================================
//========================================================================================================================
/**
information object used to create varies steer.js items
@constructor
*/
steer.item.CreateInfo = function () {
    /** @property {number} x - position x*/
    this.x;
    /** @property {number} y - position y*/
    this.y;
    /** @property {string} name - identity name*/
    this.name;
    /** @property {number} maxSpeed - max speed used in Unit*/
    this.maxSpeed;
    /** @property {number} maxForce - max turning force used in Unit*/
    this.maxForce;
    /** @property {number} radius - radius used in Unit and Circle*/
    this.radius;
    /** @property {number} widthHalf - half of the width used in Polygons*/
    this.widthHalf;
    /** @property {number} heightHalf - half of the height used in Polygons*/
    this.heightHalf;
    /** @property {boolean} asBoxCenter - using given x and y as center point when creating Polygons*/
    this.asBoxCenter;
    /** @property {boolean} asBoxTopLeft - using given x and y as top left point when creating Polygons*/
    this.asBoxTopLeft;
    /** @property {boolean} asPolygon - set true when create Polygon*/
    this.asPolygon;
    /** @property {boolean} asEdge - set true when create Edge*/
    this.asEdge;
    /** @property {boolean} asCircle - set true when create Circle*/
    this.asCircle;
    /** @property {boolean} asPolygonBorder - set true when create borders made of Polygons*/
    this.asPolygonBorder;
    /** @property {number} polygonBorderWidth - set width of the polygon border*/
    this.polygonBorderWidth;
    /** @property {steer.Vector} polygonBorderTL - top left point of the polygon border */
    this.polygonBorderTL;
    /** @property {steer.Vector} polygonBorderBR - bottom right point of the polygon border */
    this.polygonBorderBR;
    /** @property {boolean} polygonBorderInside - true set the border fit inside the given width and height, false to sit the border outside of the given width and height */
    this.polygonBorderInside;
    /** @property {number} pathWidth - the width of the Path */
    this.pathWidth;
    /** @property {boolean} dynamic - dynmamic allows item to recive moving updates and move */
    this.dynamic;
    /** @property {boolean} canCollide - can this item collide to other items */
    this.canCollide;
    /** @property {object[]} vertices - vertices used to create custom Polygons */
    this.vertices;
    /** @property {steer.Vector} sensorForce - force in Sensor */
    this.sensorForce;
    /** @property {number} sensorForceType - Sensor force type, supports Sensor.FORCE_PUSH_VECTOR , Sensor.FORCE_PUSH_CENTER, Sensor.FORCE_PULL_CENTER*/
    this.sensorForceType;
    /** @property {steer.Vector} blockSize - the size of the block when creating Gridmap*/
    this.blockSize;
    /** @property {steer.Vector} gridSize - the size of the grid when creating Gridmap*/
    this.gridSize;
    /** @property {steer.item.PathInfo} pathInfo - the PathInfo object used to create Path */
    this.pathInfo;
}



//========================================================================================================================
//========================================================================================================================
// Unit          src/item/Unit
//========================================================================================================================
//========================================================================================================================
/**
the basic movable item in the steer.js domain, contains functions and datas that are used to caculate targeting position after applying force.
@extends steer.item.ItemBase
@constructor 
@param {box2d.b2Body} b2body - the given box2d object
@param {box2d.b2Body} radius - circle radius 
@param {number} maxSpeed - maximum speed
@param {string} maxForce- maximum force
@param {string} [name=null] - identity name
*/
steer.item.Unit = function () {

    /** @property {number} maxSpeed - maxmium speed */
    this.maxSpeed;

    /** @property {number} maxForce - maxmium turnning force */
    this.maxForce;

    /** @property {steer.Vector} velocity - current velocity */
    this.velocity;

    /** @property {steer.Vector} acceleration - current velocity */
    this.acceleration;

    /** @property {steer.Vector} acceleration - used for Euler method caculation, reset to zero after each update. */
    this.acceleration;

    /** @property {number} separateRadius - seperate Radius used in seperation behavior */
    this.separateRadius;

    /** @property {number} cohesionRadius - cohesion Radius used in cohesion behavior */
    this.cohesionRadius;

    /** @property {number} alignRadius - alignment Radius used in algin behavior */
    this.alignRadius;

    /** @property {number} wanderRadius - used in wandering behaior, the wandering circle radius */
    this.wanderRadius;

    /** @property {number} wanderRatioDeg - used in wandering behaior, amount of angle to turn randomly in each update*/
    this.wanderRatioDeg;

    /** @property {number} pathVelocityRatio - used in path following behavior, the ratio to the future seek point on the path */
    this.pathVelocityRatio;

    /** @property {number} pathOnFrontRatio - 
    used in path following behavior, the unit front velocity ratio to find closest perpendicular point on the path */
    this.pathOnFrontRatio;

    /** @property {number} pathAtIndex -  used in path following behavior, the current path segment index to seek to */
    this.pathAtIndex;

    /** @property {boolean} loopOnPath - used in path following behavior, loop on path if last segment on path reached*/
    this.loopOnPath;

    /** @property {number} rayFrontRatio - multiplication value used to generate raycast to predict future point. raycast length equation = unit.velocity * rayFrontRatio */
    this.rayFrontRatio;

    /** @property {boolean} canCollide - can this unit collide with other units*/
    this.canCollide;

    /** @property {number} c_velocityLength - current velocity length*/
    this.c_velocityLength;

    /** @property {steer.Vector[]} c_rayInfo - current raycast datas*/
    this.c_rayInfo;

    /** @property {object} data - any custom data, usually store display object reference. */
    this.data;

}

/**@property {number} UnitSperateGap - extra seperate radius value to unit, used unalignedAvoidance and unit separateRadius */
steer.item.Unit.UnitSperateGap;

/**
apply force to the unit
@param {steer.Vector} force - force to apply
@param {number} [mult=1] - multiply by value
*/
steer.item.Unit.prototype.applyForce = function () { };

/**
caculate current given force and update to new position
@param {number} delta - time elapsed since last update
*/
steer.item.Unit.prototype.update = function () { };

/**
get current raycast information
@returns {steer.Vector[]} - returns current raycast information
*/
steer.item.Unit.prototype.getRaycast = function () { };

/**
update collision setting
@param {boolean} canCollide - can this object collide with other object
*/
steer.item.Unit.prototype.setCanCollideOtherUnit = function () { };

/**
set position base on box2d coordinates
@param {number} x - x in box2d coordinate
@param {number} y - y in box2d coordinate
*/
steer.item.Unit.prototype.setb2Position = function () { };

/**
set position base on pixel coordinates
@param {number} x - x in pixel coordinate
@param {number} y - y in pixel coordinate
*/
steer.item.Unit.prototype.setSteerPosition = function () { };

/**
get bounding box of this object, includes raycast and all force radius
@returns {object} rect - rectangle in format { x: number; y: number; w: number; h: number }
*/
steer.item.Unit.prototype.getBoundingBox = function () { };

/**
reset velocity and acceleration to zero
*/
steer.item.Unit.prototype.resetVelocity = function () { };